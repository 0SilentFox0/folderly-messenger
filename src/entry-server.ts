import { renderToString } from '@vue/server-renderer';
import { renderHeadToString } from '@vueuse/head';
import { createApp } from './main';

type PreloadLinks = {
  js: string;
  css: string;
  meta: string;
};

export async function render(url: string, manifest: Record<string, string[]>) {
  const { app, router, head, store } = createApp();
  // set the router to the desired URL before rendering

  router.push(url);
  await router.isReady();

  // passing SSR context object which will be available via useSSRContext()
  // @vitejs/plugin-vue injects code into a component's setup() that registers
  // itself on ctx.modules. After the render, ctx.modules would contain all the
  // components that have been instantiated during this render call.
  const ctx: any = {};
  const html = await renderToString(app, ctx);
  const { headTags } = renderHeadToString(head);
  const meta = headTags.replace('<meta name="head:count" content="0">', '');
  // the SSR manifest generated by Vite contains module -> chunk/asset mapping
  // which we can then use to determine what files need to be preloaded for this
  // request.
  const preloadLinks = renderPreloadLinks(ctx.modules, manifest);
  const payload = store.state.value;
  preloadLinks.meta = meta;

  return { html, preloadLinks, payload };
}

function renderPreloadLinks(
  modules: Set<string>,
  manifest: Record<string, string[]>,
): PreloadLinks {
  let links: PreloadLinks = {
    js: '',
    css: '',
    meta: '',
  };
  const seen = new Set<string>();
  modules.forEach(id => {
    const files = manifest[id];
    if (files) {
      files.forEach(file => {
        if (!seen.has(file)) {
          seen.add(file);
          renderPreloadLink(file, links);
        }
      });
    }
  });
  return links;
}

function renderPreloadLink(file: string, links: PreloadLinks) {
  if (file.endsWith('.js')) {
    return (links.js += `<link rel="modulepreload" crossorigin href="${file}">`);
  } else if (file.endsWith('.css')) {
    return (links.css += `<link rel="stylesheet" href="${file}">`);
  } else {
    // TODO
    return;
  }
}
